// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 09:10:39.8129199 +0200 CEST m=+0.020566301

package messages

import (
	"GoDofus/utils"
	"bytes"
	"encoding/binary"
	"fmt"
)

type notificationList struct {
	PacketId uint32
	flags    []int32
}

var notificationListMap = make(map[uint]*notificationList)

func GetNotificationListNOA(instance uint) *notificationList {
	notificationList_, ok := notificationListMap[instance]

	if ok {
		return notificationList_
	}

	notificationListMap[instance] = &notificationList{PacketId: NotificationListID}
	return notificationListMap[instance]
}

func (n *notificationList) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, uint16(len(n.flags)))
	for i := 0; i < len(n.flags); i++ {
		utils.WriteVarInt32(buff, n.flags[i])
	}
}

func (n *notificationList) Deserialize(reader *bytes.Reader) {
	var len_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len_)
	n.flags = nil
	for i := 0; i < int(len_); i++ {
		n.flags = append(n.flags, utils.ReadVarInt32(reader))
	}
}

func (n *notificationList) GetPacketId() uint32 {
	return n.PacketId
}

func (n *notificationList) String() string {
	return fmt.Sprintf("packetId: %d\n", n.PacketId)
}
