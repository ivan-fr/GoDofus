// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-28 20:07:39.0122938 +0200 CEST m=+0.023438401

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type basicCharactersList struct {
	PacketId  uint32
	variables []*item
}

var basicCharactersListMap = make(map[uint]*basicCharactersList)

func GetBasicCharactersListNOA(instance uint) *basicCharactersList {
	basicCharactersList_, ok := basicCharactersListMap[instance]

	if ok {
		return basicCharactersList_
	}

	basicCharactersListMap[instance] = &basicCharactersList{PacketId: BasicCharactersListID}
	return basicCharactersListMap[instance]
}

func (b *basicCharactersList) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, uint16(len(b.variables)))

	for i := 0; i < len(b.variables); i++ {
		b.variables[i].Serialize(buff)
	}
}

func (b *basicCharactersList) Deserialize(reader *bytes.Reader) {
	var len_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len_)

	for i := 0; i < int(len_); i++ {
		var item_ = new(item)
		item_.Deserialize(reader)
		b.variables = append(b.variables, item_)
	}
}

func (b *basicCharactersList) GetPacketId() uint32 {
	return b.PacketId
}

func (b *basicCharactersList) String() string {
	return fmt.Sprintf("packetId: %d\n", b.PacketId)
}
