// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 23:07:10.0993527 +0200 CEST m=+45.214850401

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type acquaintanceInformation struct {
	PacketId                     uint32
	abstractContactInformations0 *abstractContactInformations
	playerState                  byte
}

var acquaintanceInformationMap = make(map[uint]*acquaintanceInformation)

func (ac *acquaintanceInformation) GetNOA(instance uint) Message {
	acquaintanceInformation_, ok := acquaintanceInformationMap[instance]

	if ok {
		return acquaintanceInformation_
	}

	acquaintanceInformationMap[instance] = &acquaintanceInformation{PacketId: AcquaintanceInformationID}
	return acquaintanceInformationMap[instance]
}

func (ac *acquaintanceInformation) Serialize(buff *bytes.Buffer) {
	ac.abstractContactInformations0.Serialize(buff)
	_ = binary.Write(buff, binary.BigEndian, ac.playerState)
}

func (ac *acquaintanceInformation) Deserialize(reader *bytes.Reader) {
	ac.abstractContactInformations0 = new(abstractContactInformations)
	ac.abstractContactInformations0.Deserialize(reader)
	_ = binary.Read(reader, binary.BigEndian, &ac.playerState)
}

func (ac *acquaintanceInformation) GetPacketId() uint32 {
	return ac.PacketId
}

func (ac *acquaintanceInformation) String() string {
	return fmt.Sprintf("packetId: %d\n", ac.PacketId)
}
