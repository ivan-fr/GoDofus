// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 10:37:58.5162073 +0200 CEST m=+0.019867301

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type shortcutEmote struct {
	PacketId uint32
	sO       *shortcut
	emoteId  byte
}

var shortcutEmoteMap = make(map[uint]*shortcutEmote)

func GetShortcutEmoteNOA(instance uint) *shortcutEmote {
	shortcutEmote_, ok := shortcutEmoteMap[instance]

	if ok {
		return shortcutEmote_
	}

	shortcutEmoteMap[instance] = &shortcutEmote{PacketId: ShortcutEmoteID}
	return shortcutEmoteMap[instance]
}

func (s *shortcutEmote) Serialize(buff *bytes.Buffer) {
	s.sO.Serialize(buff)
	_ = binary.Write(buff, binary.BigEndian, s.emoteId)
}

func (s *shortcutEmote) Deserialize(reader *bytes.Reader) {
	s.sO = new(shortcut)
	s.sO.Deserialize(reader)
	_ = binary.Read(reader, binary.BigEndian, &s.emoteId)
}

func (s *shortcutEmote) GetPacketId() uint32 {
	return s.PacketId
}

func (s *shortcutEmote) String() string {
	return fmt.Sprintf("packetId: %d\n", s.PacketId)
}
