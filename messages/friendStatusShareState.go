// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 09:45:16.9122609 +0200 CEST m=+3.854104701

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type friendStatusShareState struct {
	PacketId uint32
	share    bool
}

var friendStatusShareStateMap = make(map[uint]*friendStatusShareState)

func (fr *friendStatusShareState) GetNOA(instance uint) Message {
	friendStatusShareState_, ok := friendStatusShareStateMap[instance]

	if ok {
		return friendStatusShareState_
	}

	friendStatusShareStateMap[instance] = &friendStatusShareState{PacketId: FriendStatusShareStateID}
	return friendStatusShareStateMap[instance]
}

func (fr *friendStatusShareState) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, fr.share)
}

func (fr *friendStatusShareState) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &fr.share)
}

func (fr *friendStatusShareState) GetPacketId() uint32 {
	return fr.PacketId
}

func (fr *friendStatusShareState) String() string {
	return fmt.Sprintf("packetId: %d\n", fr.PacketId)
}
