// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 22:22:36.8545504 +0200 CEST m=+27.563627001

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type sequenceNumber struct {
	PacketId uint32
	number   int16
}

var sequenceNumberMap = make(map[uint]*sequenceNumber)

func (se *sequenceNumber) GetNOA(instance uint) Message {
	sequenceNumber_, ok := sequenceNumberMap[instance]

	if ok {
		return sequenceNumber_
	}

	sequenceNumberMap[instance] = &sequenceNumber{PacketId: SequenceNumberID}
	return sequenceNumberMap[instance]
}

func (se *sequenceNumber) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, se.number)
}

func (se *sequenceNumber) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &se.number)
}

func (se *sequenceNumber) GetPacketId() uint32 {
	return se.PacketId
}

func (se *sequenceNumber) String() string {
	return fmt.Sprintf("packetId: %d\n", se.PacketId)
}
