// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 15:25:47.802937 +0200 CEST m=+44.669397801

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type houseOnMapInformations struct {
	PacketId                  uint32
	houseInformations         *houseInformations
	doorsOnMap                []int32
	houseInstanceInformations []*houseInstanceInformations
}

var houseOnMapInformationsMap = make(map[uint]*houseOnMapInformations)

func GetHouseOnMapInformationsNOA(instance uint) *houseOnMapInformations {
	houseOnMapInformations_, ok := houseOnMapInformationsMap[instance]

	if ok {
		return houseOnMapInformations_
	}

	houseOnMapInformationsMap[instance] = &houseOnMapInformations{PacketId: HouseOnMapInformationsID}
	return houseOnMapInformationsMap[instance]
}

func (ho *houseOnMapInformations) Serialize(buff *bytes.Buffer) {
	ho.houseInformations.Serialize(buff)
	_ = binary.Write(buff, binary.BigEndian, uint16(len(ho.doorsOnMap)))
	_ = binary.Write(buff, binary.BigEndian, ho.doorsOnMap)
	_ = binary.Write(buff, binary.BigEndian, uint16(len(ho.houseInstanceInformations)))
	for i := 0; i < len(ho.houseInstanceInformations); i++ {
		ho.houseInstanceInformations[i].Serialize(buff)
	}
}

func (ho *houseOnMapInformations) Deserialize(reader *bytes.Reader) {
	ho.houseInformations = new(houseInformations)
	ho.houseInformations.Deserialize(reader)
	var len1_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len1_)
	ho.doorsOnMap = make([]int32, len1_)
	_ = binary.Read(reader, binary.BigEndian, ho.doorsOnMap)
	var len2_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len2_)
	ho.houseInstanceInformations = nil
	for i := 0; i < int(len2_); i++ {
		aMessage2 := new(houseInstanceInformations)
		aMessage2.Deserialize(reader)
		ho.houseInstanceInformations = append(ho.houseInstanceInformations, aMessage2)
	}
}

func (ho *houseOnMapInformations) GetPacketId() uint32 {
	return ho.PacketId
}

func (ho *houseOnMapInformations) String() string {
	return fmt.Sprintf("packetId: %d\n", ho.PacketId)
}
