// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 15:11:16.9241042 +0200 CEST m=+27.396137901

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type accountHouse struct {
	PacketId                 uint32
	accountHouseInformations []*accountHouseInformations
}

var accountHouseMap = make(map[uint]*accountHouse)

func (ac *accountHouse) GetNOA(instance uint) Message {
	accountHouse_, ok := accountHouseMap[instance]

	if ok {
		return accountHouse_
	}

	accountHouseMap[instance] = &accountHouse{PacketId: AccountHouseID}
	return accountHouseMap[instance]
}

func (ac *accountHouse) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, uint16(len(ac.accountHouseInformations)))
	for i := 0; i < len(ac.accountHouseInformations); i++ {
		ac.accountHouseInformations[i].Serialize(buff)
	}
}

func (ac *accountHouse) Deserialize(reader *bytes.Reader) {
	var len0_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len0_)
	ac.accountHouseInformations = nil
	for i := 0; i < int(len0_); i++ {
		aMessage0 := new(accountHouseInformations)
		aMessage0.Deserialize(reader)
		ac.accountHouseInformations = append(ac.accountHouseInformations, aMessage0)
	}
}

func (ac *accountHouse) GetPacketId() uint32 {
	return ac.PacketId
}

func (ac *accountHouse) String() string {
	return fmt.Sprintf("packetId: %d\n", ac.PacketId)
}
