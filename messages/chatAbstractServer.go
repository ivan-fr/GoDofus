// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 22:08:12.5279162 +0200 CEST m=+41.573754201

package messages

import (
	"GoDofus/utils"
	"bytes"
	"encoding/binary"
	"fmt"
)

type chatAbstractServer struct {
	PacketId    uint32
	channel     byte
	content     []byte
	timestamp   int32
	fingerprint []byte
}

var chatAbstractServerMap = make(map[uint]*chatAbstractServer)

func (ch *chatAbstractServer) GetNOA(instance uint) Message {
	chatAbstractServer_, ok := chatAbstractServerMap[instance]

	if ok {
		return chatAbstractServer_
	}

	chatAbstractServerMap[instance] = &chatAbstractServer{PacketId: ChatAbstractServerID}
	return chatAbstractServerMap[instance]
}

func (ch *chatAbstractServer) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, ch.channel)
	utils.WriteUTF(buff, ch.content)
	_ = binary.Write(buff, binary.BigEndian, ch.timestamp)
	utils.WriteUTF(buff, ch.fingerprint)
}

func (ch *chatAbstractServer) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &ch.channel)
	ch.content = utils.ReadUTF(reader)
	_ = binary.Read(reader, binary.BigEndian, &ch.timestamp)
	ch.fingerprint = utils.ReadUTF(reader)
}

func (ch *chatAbstractServer) GetPacketId() uint32 {
	return ch.PacketId
}

func (ch *chatAbstractServer) String() string {
	return fmt.Sprintf("packetId: %d\n", ch.PacketId)
}
