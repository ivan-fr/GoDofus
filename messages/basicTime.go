// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-28 17:14:42.1350629 +0200 CEST m=+0.020032501

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type basicTime struct {
	PacketId       uint32
	timestamp      float64
	timezoneOffset int16
}

var basicTimeMap = make(map[uint]*basicTime)

func (b *basicTime) GetNOA(instance uint) Message {
	basicTime_, ok := basicTimeMap[instance]

	if ok {
		return basicTime_
	}

	basicTimeMap[instance] = &basicTime{PacketId: BasicTimeID}
	return basicTimeMap[instance]
}

func (b *basicTime) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, b.timestamp)
	_ = binary.Write(buff, binary.BigEndian, b.timezoneOffset)
}

func (b *basicTime) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &b.timestamp)
	_ = binary.Read(reader, binary.BigEndian, &b.timezoneOffset)
}

func (b *basicTime) GetPacketId() uint32 {
	return b.PacketId
}

func (b *basicTime) String() string {
	return fmt.Sprintf("packetId: %d\n", b.PacketId)
}
