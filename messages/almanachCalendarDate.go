// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 14:52:42.9730293 +0200 CEST m=+26.301585501

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type almanachCalendarDate struct {
	PacketId uint32
	data     int32
}

var almanachCalendarDateMap = make(map[uint]*almanachCalendarDate)

func (al *almanachCalendarDate) GetNOA(instance uint) Message {
	almanachCalendarDate_, ok := almanachCalendarDateMap[instance]

	if ok {
		return almanachCalendarDate_
	}

	almanachCalendarDateMap[instance] = &almanachCalendarDate{PacketId: AlmanachCalendarDateID}
	return almanachCalendarDateMap[instance]
}

func (al *almanachCalendarDate) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, al.data)
}

func (al *almanachCalendarDate) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &al.data)
}

func (al *almanachCalendarDate) GetPacketId() uint32 {
	return al.PacketId
}

func (al *almanachCalendarDate) String() string {
	return fmt.Sprintf("packetId: %d\n", al.PacketId)
}
