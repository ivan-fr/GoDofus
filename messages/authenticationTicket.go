// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-25 13:31:44.2855433 +0200 CEST m=+0.003124301

package messages

import (
	"GoDofus/utils"
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"fmt"
)

type authenticationTicket struct {
	PacketId uint32
}

var authenticationTicket_ = &authenticationTicket{PacketId: AuthenticationTicketID}

func GetAuthenticationTicketNOA() *authenticationTicket {
	return authenticationTicket_
}

func (a *authenticationTicket) Serialize(buff *bytes.Buffer) {
	id := GetIdentificationNOA()
	ticket := GetSelectedServerDataExtendedNOA().SSD.ticket
	aesKey := GetIdentificationNOA().AesKEY_

	block, err := aes.NewCipher(aesKey)
	if err != nil {
		panic(err)
	}

	if len(ticket) < aes.BlockSize {
		panic("ciphertext too short")
	}
	iv := aesKey[:aes.BlockSize]

	if len(ticket)%aes.BlockSize != 0 {
		panic("ciphertext is not a multiple of the block size")
	}

	mode := cipher.NewCBCDecrypter(block, iv)
	mode.CryptBlocks(ticket, ticket)

	utils.WriteUTF(buff, id.Lang)
	utils.WriteUTF(buff, ticket)
}

func (a *authenticationTicket) Deserialize(reader *bytes.Reader) {

}

func (a *authenticationTicket) GetPacketId() uint32 {
	return a.PacketId
}

func (a *authenticationTicket) String() string {
	return fmt.Sprintf("packetId: %d\n", a.PacketId)
}
