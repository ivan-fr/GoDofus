// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-25 13:31:44.2855433 +0200 CEST m=+0.003124301

package messages

import (
	"GoDofus/managers"
	"GoDofus/utils"
	"bytes"
	"crypto/aes"
	"crypto/cipher"
	"fmt"
)

type authenticationTicket struct {
	PacketId uint32
	mAuth    *managers.Authentification
}

var authenticationTicket_ = &authenticationTicket{PacketId: AuthenticationTicketID}

func GetAuthenticationTicketNOA(mAuth *managers.Authentification) *authenticationTicket {
	if authenticationTicket_.mAuth == nil {
		authenticationTicket_.mAuth = mAuth
	}

	return authenticationTicket_
}

func (a *authenticationTicket) Serialize(buff *bytes.Buffer) {
	id := GetIdentificationNOA()
	sSD := GetSelectedServerDataExtendedNOA().SSD
	aesKey := a.mAuth.AESKey

	block, err := aes.NewCipher(aesKey)
	if err != nil {
		panic(err)
	}

	if len(sSD.ticket) < aes.BlockSize {
		panic("ciphertext too short")
	}
	iv := sSD.ticket[:aes.BlockSize]
	ciphertext := sSD.ticket[aes.BlockSize:]

	if len(ciphertext)%aes.BlockSize != 0 {
		panic("ciphertext is not a multiple of the block size")
	}
	mode := cipher.NewCBCDecrypter(block, iv)
	mode.CryptBlocks(ciphertext, ciphertext)

	utils.WriteUTF(buff, id.Lang)
	utils.WriteUTF(buff, ciphertext)
}

func (a *authenticationTicket) Deserialize(reader *bytes.Reader) {

}

func (a *authenticationTicket) GetPacketId() uint32 {
	return a.PacketId
}

func (a *authenticationTicket) String() string {
	return fmt.Sprintf("packetId: %d\n", a.PacketId)
}
