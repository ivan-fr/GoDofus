// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 09:38:53.9526062 +0200 CEST m=+35.029717701

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type alignmentRankUpdate struct {
	PacketId      uint32
	alignmentRank byte
	verbose       bool
}

var alignmentRankUpdateMap = make(map[uint]*alignmentRankUpdate)

func (al *alignmentRankUpdate) GetNOA(instance uint) Message {
	alignmentRankUpdate_, ok := alignmentRankUpdateMap[instance]

	if ok {
		return alignmentRankUpdate_
	}

	alignmentRankUpdateMap[instance] = &alignmentRankUpdate{PacketId: AlignmentRankUpdateID}
	return alignmentRankUpdateMap[instance]
}

func (al *alignmentRankUpdate) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, al.alignmentRank)
	_ = binary.Write(buff, binary.BigEndian, al.verbose)
}

func (al *alignmentRankUpdate) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &al.alignmentRank)
	_ = binary.Read(reader, binary.BigEndian, &al.verbose)
}

func (al *alignmentRankUpdate) GetPacketId() uint32 {
	return al.PacketId
}

func (al *alignmentRankUpdate) String() string {
	return fmt.Sprintf("packetId: %d\n", al.PacketId)
}
