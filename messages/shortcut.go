// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 10:23:43.3255467 +0200 CEST m=+0.019935201

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type shortcut struct {
	PacketId uint32
	slot     byte
}

var shortcutMap = make(map[uint]*shortcut)

func (s *shortcut) GetNOA(instance uint) Message {
	shortcut_, ok := shortcutMap[instance]

	if ok {
		return shortcut_
	}

	shortcutMap[instance] = &shortcut{PacketId: ShortcutID}
	return shortcutMap[instance]
}

func (s *shortcut) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, s.slot)
}

func (s *shortcut) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &s.slot)
}

func (s *shortcut) GetPacketId() uint32 {
	return s.PacketId
}

func (s *shortcut) String() string {
	return fmt.Sprintf("packetId: %d\n", s.PacketId)
}
