// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-09-11 12:14:25.3638483 +0200 CEST m=+46.280060001

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type SubEntity struct {
	PacketId             uint32
	bindingPointCategory byte
	bindingPointIndex    byte
	EntityLook2          *EntityLook
}

var SubEntityMap = make(map[uint]*SubEntity)

func (Su *SubEntity) GetNOA(instance uint) Message {
	SubEntity_, ok := SubEntityMap[instance]

	if ok {
		return SubEntity_
	}

	SubEntityMap[instance] = &SubEntity{PacketId: SubEntityID}
	return SubEntityMap[instance]
}

func (Su *SubEntity) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, Su.bindingPointCategory)
	_ = binary.Write(buff, binary.BigEndian, Su.bindingPointIndex)
	Su.EntityLook2.Serialize(buff)
}

func (Su *SubEntity) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &Su.bindingPointCategory)
	_ = binary.Read(reader, binary.BigEndian, &Su.bindingPointIndex)
	Su.EntityLook2 = new(EntityLook)
	Su.EntityLook2.Deserialize(reader)
}

func (Su *SubEntity) GetPacketId() uint32 {
	return Su.PacketId
}

func (Su *SubEntity) String() string {
	return fmt.Sprintf("packetId: %d\n", Su.PacketId)
}
