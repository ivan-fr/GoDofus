// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-28 19:08:33.9672525 +0200 CEST m=+0.020145601

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type serverSessionConstantInteger struct {
	PacketId uint32
	ssC      *serverSessionConstant
	value    int32
}

var serverSessionConstantIntegerMap = make(map[uint]*serverSessionConstantInteger)

func (s *serverSessionConstantInteger) GetNOA(instance uint) Message {
	serverSessionConstantInteger_, ok := serverSessionConstantIntegerMap[instance]

	if ok {
		return serverSessionConstantInteger_
	}

	serverSessionConstantIntegerMap[instance] = &serverSessionConstantInteger{PacketId: ServerSessionConstantIntegerID}
	return serverSessionConstantIntegerMap[instance]
}

func (s *serverSessionConstantInteger) Serialize(buff *bytes.Buffer) {
	s.ssC.Serialize(buff)
	_ = binary.Write(buff, binary.BigEndian, s.value)
}

func (s *serverSessionConstantInteger) Deserialize(reader *bytes.Reader) {
	s.ssC = new(serverSessionConstant)
	s.ssC.Deserialize(reader)
	_ = binary.Read(reader, binary.BigEndian, &s.value)
}

func (s *serverSessionConstantInteger) GetPacketId() uint32 {
	return s.PacketId
}

func (s *serverSessionConstantInteger) String() string {
	return fmt.Sprintf("packetId: %d\n", s.PacketId)
}
