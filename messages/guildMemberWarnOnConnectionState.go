// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 09:45:42.6950807 +0200 CEST m=+5.405319401

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type guildMemberWarnOnConnectionState struct {
	PacketId uint32
	enable   bool
}

var guildMemberWarnOnConnectionStateMap = make(map[uint]*guildMemberWarnOnConnectionState)

func (gu *guildMemberWarnOnConnectionState) GetNOA(instance uint) Message {
	guildMemberWarnOnConnectionState_, ok := guildMemberWarnOnConnectionStateMap[instance]

	if ok {
		return guildMemberWarnOnConnectionState_
	}

	guildMemberWarnOnConnectionStateMap[instance] = &guildMemberWarnOnConnectionState{PacketId: GuildMemberWarnOnConnectionStateID}
	return guildMemberWarnOnConnectionStateMap[instance]
}

func (gu *guildMemberWarnOnConnectionState) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, gu.enable)
}

func (gu *guildMemberWarnOnConnectionState) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &gu.enable)
}

func (gu *guildMemberWarnOnConnectionState) GetPacketId() uint32 {
	return gu.PacketId
}

func (gu *guildMemberWarnOnConnectionState) String() string {
	return fmt.Sprintf("packetId: %d\n", gu.PacketId)
}
