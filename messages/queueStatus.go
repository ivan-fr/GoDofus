// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 22:43:40.0213847 +0200 CEST m=+36.315798001

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type queueStatus struct {
	PacketId uint32
	position int16
	total    uint16
}

var queueStatusMap = make(map[uint]*queueStatus)

func (qu *queueStatus) GetNOA(instance uint) Message {
	queueStatus_, ok := queueStatusMap[instance]

	if ok {
		return queueStatus_
	}

	queueStatusMap[instance] = &queueStatus{PacketId: QueueStatusID}
	return queueStatusMap[instance]
}

func (qu *queueStatus) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, qu.position)
	_ = binary.Write(buff, binary.BigEndian, qu.total)
}

func (qu *queueStatus) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &qu.position)
	_ = binary.Read(reader, binary.BigEndian, &qu.total)
}

func (qu *queueStatus) GetPacketId() uint32 {
	return qu.PacketId
}

func (qu *queueStatus) String() string {
	return fmt.Sprintf("packetId: %d\n", qu.PacketId)
}
