// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-30 09:41:35.991857 +0200 CEST m=+29.364872401

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type friendWarnOnConnectionState struct {
	PacketId uint32
	enable   bool
}

var friendWarnOnConnectionStateMap = make(map[uint]*friendWarnOnConnectionState)

func (fr *friendWarnOnConnectionState) GetNOA(instance uint) Message {
	friendWarnOnConnectionState_, ok := friendWarnOnConnectionStateMap[instance]

	if ok {
		return friendWarnOnConnectionState_
	}

	friendWarnOnConnectionStateMap[instance] = &friendWarnOnConnectionState{PacketId: FriendWarnOnConnectionStateID}
	return friendWarnOnConnectionStateMap[instance]
}

func (fr *friendWarnOnConnectionState) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, fr.enable)
}

func (fr *friendWarnOnConnectionState) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &fr.enable)
}

func (fr *friendWarnOnConnectionState) GetPacketId() uint32 {
	return fr.PacketId
}

func (fr *friendWarnOnConnectionState) String() string {
	return fmt.Sprintf("packetId: %d\n", fr.PacketId)
}
