// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-09-11 13:01:35.1789959 +0200 CEST m=+136.565293801

package messages

import (
	"GoDofus/utils"
	"bytes"
	"encoding/binary"
	"fmt"
)

type MapComplementaryInformationsData struct {
	PacketId                       uint32
	subAreaId                      int32
	mapId                          float64
	HouseInformations2             []*HouseInformations
	GameRolePlayActorInformations3 []*GameRolePlayActorInformations
	InteractiveElement4            []*InteractiveElement
	StatedElement5                 []*StatedElement
	MapObstacle6                   []*MapObstacle
	FightCommonInformations7       []*FightCommonInformations
	hasAggressiveMonsters          bool
	FightStartingPositions9        *FightStartingPositions
}

var MapComplementaryInformationsDataMap = make(map[uint]*MapComplementaryInformationsData)

func (Ma *MapComplementaryInformationsData) GetNOA(instance uint) Message {
	MapComplementaryInformationsData_, ok := MapComplementaryInformationsDataMap[instance]

	if ok {
		return MapComplementaryInformationsData_
	}

	MapComplementaryInformationsDataMap[instance] = &MapComplementaryInformationsData{PacketId: MapComplementaryInformationsDataID}
	return MapComplementaryInformationsDataMap[instance]
}

func (Ma *MapComplementaryInformationsData) Serialize(buff *bytes.Buffer) {
	utils.WriteVarInt16(buff, Ma.subAreaId)
	_ = binary.Write(buff, binary.BigEndian, Ma.mapId)
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.HouseInformations2)))
	for i := 0; i < len(Ma.HouseInformations2); i++ {
		Ma.HouseInformations2[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.GameRolePlayActorInformations3)))
	for i := 0; i < len(Ma.GameRolePlayActorInformations3); i++ {
		Ma.GameRolePlayActorInformations3[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.InteractiveElement4)))
	for i := 0; i < len(Ma.InteractiveElement4); i++ {
		Ma.InteractiveElement4[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.StatedElement5)))
	for i := 0; i < len(Ma.StatedElement5); i++ {
		Ma.StatedElement5[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.MapObstacle6)))
	for i := 0; i < len(Ma.MapObstacle6); i++ {
		Ma.MapObstacle6[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(Ma.FightCommonInformations7)))
	for i := 0; i < len(Ma.FightCommonInformations7); i++ {
		Ma.FightCommonInformations7[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, Ma.hasAggressiveMonsters)
	Ma.FightStartingPositions9.Serialize(buff)
}

func (Ma *MapComplementaryInformationsData) Deserialize(reader *bytes.Reader) {
	Ma.subAreaId = utils.ReadVarInt16(reader)
	_ = binary.Read(reader, binary.BigEndian, &Ma.mapId)
	var len2_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len2_)
	Ma.HouseInformations2 = nil
	for i := 0; i < int(len2_); i++ {
		aMessage2 := new(HouseInformations)
		aMessage2.Deserialize(reader)
		Ma.HouseInformations2 = append(Ma.HouseInformations2, aMessage2)
	}
	var len3_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len3_)
	Ma.GameRolePlayActorInformations3 = nil
	for i := 0; i < int(len3_); i++ {
		aMessage3 := new(GameRolePlayActorInformations)
		aMessage3.Deserialize(reader)
		Ma.GameRolePlayActorInformations3 = append(Ma.GameRolePlayActorInformations3, aMessage3)
	}
	var len4_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len4_)
	Ma.InteractiveElement4 = nil
	for i := 0; i < int(len4_); i++ {
		aMessage4 := new(InteractiveElement)
		aMessage4.Deserialize(reader)
		Ma.InteractiveElement4 = append(Ma.InteractiveElement4, aMessage4)
	}
	var len5_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len5_)
	Ma.StatedElement5 = nil
	for i := 0; i < int(len5_); i++ {
		aMessage5 := new(StatedElement)
		aMessage5.Deserialize(reader)
		Ma.StatedElement5 = append(Ma.StatedElement5, aMessage5)
	}
	var len6_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len6_)
	Ma.MapObstacle6 = nil
	for i := 0; i < int(len6_); i++ {
		aMessage6 := new(MapObstacle)
		aMessage6.Deserialize(reader)
		Ma.MapObstacle6 = append(Ma.MapObstacle6, aMessage6)
	}
	var len7_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len7_)
	Ma.FightCommonInformations7 = nil
	for i := 0; i < int(len7_); i++ {
		aMessage7 := new(FightCommonInformations)
		aMessage7.Deserialize(reader)
		Ma.FightCommonInformations7 = append(Ma.FightCommonInformations7, aMessage7)
	}
	_ = binary.Read(reader, binary.BigEndian, &Ma.hasAggressiveMonsters)
	Ma.FightStartingPositions9 = new(FightStartingPositions)
	Ma.FightStartingPositions9.Deserialize(reader)
}

func (Ma *MapComplementaryInformationsData) GetPacketId() uint32 {
	return Ma.PacketId
}

func (Ma *MapComplementaryInformationsData) String() string {
	return fmt.Sprintf("packetId: %d\n", Ma.PacketId)
}
