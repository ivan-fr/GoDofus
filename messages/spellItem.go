// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 10:08:26.223057 +0200 CEST m=+0.020532401

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type spellItem struct {
	PacketId   uint32
	spellId    int32
	spellLevel int16
}

var spellItemMap = make(map[uint]*spellItem)

func (s *spellItem) GetNOA(instance uint) Message {
	spellItem_, ok := spellItemMap[instance]

	if ok {
		return spellItem_
	}

	spellItemMap[instance] = &spellItem{PacketId: SpellItemID}
	return spellItemMap[instance]
}

func (s *spellItem) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, s.spellId)
	_ = binary.Write(buff, binary.BigEndian, s.spellLevel)
}

func (s *spellItem) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &s.spellId)
	_ = binary.Read(reader, binary.BigEndian, &s.spellLevel)
}

func (s *spellItem) GetPacketId() uint32 {
	return s.PacketId
}

func (s *spellItem) String() string {
	return fmt.Sprintf("packetId: %d\n", s.PacketId)
}
