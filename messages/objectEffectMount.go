// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 12:11:47.3003511 +0200 CEST m=+0.019985801

package messages

import (
	"GoDofus/utils"
	"bytes"
	"encoding/binary"
	"fmt"
)

type objectEffectMount struct {
	PacketId             uint32
	oE                   *objectEffect
	sex                  bool
	isRideable           bool
	isFeconded           bool
	isFecondationReady   bool
	id                   float64
	expirationDate       float64
	model                int32
	name                 []byte
	owner                []byte
	level                byte
	reproductionCount    int32
	reproductionCountMax int32
	oEIs                 []*objectEffectInteger
	capacities           []int32
}

var objectEffectMountMap = make(map[uint]*objectEffectMount)

func GetObjectEffectMountNOA(instance uint) *objectEffectMount {
	objectEffectMount_, ok := objectEffectMountMap[instance]

	if ok {
		return objectEffectMount_
	}

	objectEffectMountMap[instance] = &objectEffectMount{PacketId: ObjectEffectMountID}
	return objectEffectMountMap[instance]
}

func (o *objectEffectMount) Serialize(buff *bytes.Buffer) {
	o.oE.Serialize(buff)
	var box uint32
	box = utils.SetFlag(box, 0, o.sex)
	box = utils.SetFlag(box, 1, o.isRideable)
	box = utils.SetFlag(box, 2, o.isFeconded)
	box = utils.SetFlag(box, 3, o.isFecondationReady)

	_ = binary.Write(buff, binary.BigEndian, byte(box))

	utils.WriteVarInt64(buff, o.expirationDate)
	utils.WriteVarInt32(buff, o.model)
	utils.WriteUTF(buff, o.name)
	utils.WriteUTF(buff, o.owner)
	_ = binary.Write(buff, binary.BigEndian, o.level)
	utils.WriteVarInt32(buff, o.reproductionCount)
	utils.WriteVarInt32(buff, o.reproductionCountMax)
	_ = binary.Write(buff, binary.BigEndian, uint16(len(o.oEIs)))
	for i := 0; i < len(o.oEIs); i++ {
		o.oEIs[i].Serialize(buff)
	}
	_ = binary.Write(buff, binary.BigEndian, uint16(len(o.capacities)))
	for i := 0; i < len(o.capacities); i++ {
		utils.WriteVarInt32(buff, o.capacities[i])
	}
}

func (o *objectEffectMount) Deserialize(reader *bytes.Reader) {
	o.oE = new(objectEffect)
	o.oE.Deserialize(reader)

	var box byte
	_ = binary.Read(reader, binary.BigEndian, &box)

	o.sex = utils.GetFlag(uint32(box), 0)
	o.isRideable = utils.GetFlag(uint32(box), 1)
	o.isFeconded = utils.GetFlag(uint32(box), 2)
	o.isFecondationReady = utils.GetFlag(uint32(box), 3)
	_ = binary.Read(reader, binary.BigEndian, byte(box))

	o.expirationDate = float64(utils.ReadVarUInt64(reader))
	o.model = utils.ReadVarInt32(reader)
	o.name = utils.ReadUTF(reader)
	o.owner = utils.ReadUTF(reader)
	_ = binary.Read(reader, binary.BigEndian, &o.level)
	o.reproductionCount = utils.ReadVarInt32(reader)
	o.reproductionCountMax = utils.ReadVarInt32(reader)

	var len_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len_)
	o.oEIs = nil
	for i := 0; i < int(len_); i++ {
		aOEIs := new(objectEffectInteger)
		aOEIs.Deserialize(reader)
		o.oEIs = append(o.oEIs, aOEIs)
	}

	var len2_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len2_)
	o.capacities = nil
	for i := 0; i < int(len2_); i++ {
		o.capacities = append(o.capacities, utils.ReadVarInt32(reader))
	}
}

func (o *objectEffectMount) GetPacketId() uint32 {
	return o.PacketId
}

func (o *objectEffectMount) String() string {
	return fmt.Sprintf("packetId: %d\n", o.PacketId)
}
