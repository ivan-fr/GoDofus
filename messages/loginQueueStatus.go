// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-25 09:55:36.1089029 +0200 CEST m=+0.002627201

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type loginQueueStatus struct {
	PacketId uint32
	position uint16
	total    uint16
}

var loginQueueStatusMap = make(map[uint]*loginQueueStatus)

func GetLoginQueueStatusNOA(instance uint) *loginQueueStatus {
	loginQueueStatus_, ok := loginQueueStatusMap[instance]

	if ok {
		return loginQueueStatus_
	}

	loginQueueStatusMap[instance] = &loginQueueStatus{PacketId: LoginQueueStatueID}
	return loginQueueStatus_
}

func (l *loginQueueStatus) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, l.position)
	_ = binary.Write(buff, binary.BigEndian, l.total)
}

func (l *loginQueueStatus) Deserialize(reader *bytes.Reader) {
	_ = binary.Read(reader, binary.BigEndian, &l.position)
	_ = binary.Read(reader, binary.BigEndian, &l.total)
}

func (l *loginQueueStatus) GetPacketId() uint32 {
	return l.PacketId
}

func (l *loginQueueStatus) String() string {
	return fmt.Sprintf("PacketId: %d\n", l.PacketId)
}
