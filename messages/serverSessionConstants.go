// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-28 17:18:06.8556877 +0200 CEST m=+0.020040301

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type serverSessionConstants struct {
	PacketId  uint32
	variables []*item
}

var serverSessionConstantsMap = make(map[uint]*serverSessionConstants)

func GetServerSessionConstantsNOA(instance uint) *serverSessionConstants {
	serverSessionConstants_, ok := serverSessionConstantsMap[instance]

	if ok {
		return serverSessionConstants_
	}

	serverSessionConstantsMap[instance] = &serverSessionConstants{PacketId: ServerSessionConstantsID}
	return serverSessionConstantsMap[instance]
}

func (s *serverSessionConstants) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, uint16(len(s.variables)))

	for i := 0; i < len(s.variables); i++ {
		s.variables[i].Serialize(buff)
	}
}

func (s *serverSessionConstants) Deserialize(reader *bytes.Reader) {
	var len_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len_)

	for i := 0; i < int(len_); i++ {
		var item_ = new(item)
		item_.Deserialize(reader)
		s.variables = append(s.variables, item_)
	}
}

func (s *serverSessionConstants) GetPacketId() uint32 {
	return s.PacketId
}

func (s *serverSessionConstants) String() string {
	return fmt.Sprintf("packetId: %d\n", s.PacketId)
}
