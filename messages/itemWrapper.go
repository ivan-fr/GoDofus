// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// 2021-08-29 10:14:30.5191117 +0200 CEST m=+0.020636201

package messages

import (
	"bytes"
	"encoding/binary"
	"fmt"
)

type itemWrapper struct {
	PacketId  uint32
	variables []*item
}

func (iW *itemWrapper) GetNOA(instance uint) Message {
	return nil
}

func (iW *itemWrapper) Serialize(buff *bytes.Buffer) {
	_ = binary.Write(buff, binary.BigEndian, uint16(len(iW.variables)))

	for i := 0; i < len(iW.variables); i++ {
		iW.variables[i].Serialize(buff)
	}
}

func (iW *itemWrapper) Deserialize(reader *bytes.Reader) {
	var len_ uint16
	_ = binary.Read(reader, binary.BigEndian, &len_)

	for i := 0; i < int(len_); i++ {
		var item_ = new(item)
		item_.Deserialize(reader)
		iW.variables = append(iW.variables, item_)
	}
}

func (iW *itemWrapper) GetPacketId() uint32 {
	return iW.PacketId
}

func (iW *itemWrapper) String() string {
	return fmt.Sprintf("packetId: %d\n", iW.PacketId)
}
