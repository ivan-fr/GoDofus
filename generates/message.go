package generates

import (
	"fmt"
	"os"
	"regexp"
	"strings"
	"text/template"
	"time"
)

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package messages

import (
	"bytes"
	"fmt"
)

type {{ .Name }} struct {
	PacketId uint32
}

var {{ .Name }}Map = make(map[uint]*{{ .Name }})

func Get{{ .NameCapFirst }}NOA(instance uint) *{{ .Name }} {
	{{ .Name }}_, ok := {{ .Name }}Map[instance]

	if ok {
		return {{ .Name }}_
	}

	{{ .Name }}Map[instance] = &{{ .Name }}{PacketId: {{ .NameCapFirst }}ID}
	return {{ .Name }}Map[instance]
}

func ({{.FistLetter}} *{{.Name}}) Serialize(buff *bytes.Buffer) {
	// 	_ = binary.Write(buff, binary.BigEndian, {{.FistLetter}}.param)
}

func ({{.FistLetter}} *{{.Name}}) Deserialize(reader *bytes.Reader) {
	// 	_ = binary.Read(reader, binary.BigEndian, &{{.FistLetter}}.param)
}

func ({{.FistLetter}} *{{.Name}}) GetPacketId() uint32 {
	return {{ .FistLetter }}.PacketId
}

func ({{.FistLetter}} *{{.Name}}) String() string {
	return fmt.Sprintf("packetId: %d\n", {{ .FistLetter }}.PacketId)
}
`))

var packageIDSTemplate = template.Must(template.New("").Parse(`// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package messages

const (
	{{ .ConstBefore }}	{{ .NameCapFirst }}ID = {{ .Id }}
)
`))

func GenerateMessage(Name string, packetId uint32) {
	constIDS, _ := os.ReadFile("./messages/IDS.go")

	constIDString := string(constIDS)
	var rgx = regexp.MustCompile(`^[^(]+\([^a-zA-z]*([^)]+).*`)
	rs := rgx.FindStringSubmatch(constIDString)

	f, err := os.Create(fmt.Sprintf("./messages/%s.go", Name))
	if err != nil {
		panic(err)
	}

	f2, err := os.Create("./messages/IDS.go")
	if err != nil {
		panic(err)
	}

	defer func(f *os.File) {
		err := f.Close()
		if err != nil {
			panic(err)
		}
	}(f)

	err = packageIDSTemplate.Execute(f2, struct {
		Timestamp    time.Time
		NameCapFirst string
		Id           uint32
		ConstBefore  string
	}{
		Timestamp:    time.Now(),
		NameCapFirst: strings.Title(Name),
		Id:           packetId,
		ConstBefore:  rs[1],
	})
	if err != nil {
		panic(err)
	}

	err = packageTemplate.Execute(f, struct {
		Timestamp    time.Time
		NameCapFirst string
		Name         string
		FistLetter   string
	}{
		Timestamp:    time.Now(),
		Name:         Name,
		NameCapFirst: strings.Title(Name),
		FistLetter:   string((Name)[0]),
	})
	if err != nil {
		panic(err)
	}
}
