package generates

import (
	"io/ioutil"
	"os"
	"strings"
	"text/template"
	"time"
)

var registryIDSTemplate = template.Must(template.New("").Parse(`// Code generated by go GenerateMessage; DO NOT EDIT.
// This file was generated by robots at
// {{ .Timestamp }}

package messages

var Types_ = map[int]Message{
{{range $index, $element := .Names}}	{{index $element 0}}ID: &{{index $element 1}}{},
{{end}}}
`))

func BuildRegistry() bool {
	root := "./messages/"
	files, _ := ioutil.ReadDir(root)
	var names [][]string

	for _, file := range files {
		if file.Name() == "IDS.go" || file.Name() == "message.go" || file.Name() == "registry.go" {
			continue
		}

		names = append(names,
			[]string{strings.Split(strings.Title(file.Name()), ".")[0], strings.Split(file.Name(), ".")[0]})
	}

	f2, err := os.Create("./messages/registry.go")
	if err != nil {
		panic(err)
	}

	defer func() {
		err = f2.Close()
	}()

	err = registryIDSTemplate.Execute(f2, struct {
		Timestamp time.Time
		Names     [][]string
	}{
		Timestamp: time.Now(),
		Names:     names,
	})
	if err != nil {
		panic(err)
	}

	return true
}
